MEDIANS AND OTHER PERCENTILES

1) Summary Statistics

    a) The mean as a summary

        Salaries of CSE majors 10 years later
        e.g. 100 students

            $100k - 200k    MANY PEOPLE
            $60k            PART TIME
            $30k            GRAD SCHOOL
            $0              PRISON

            AVERAGE approx. $100k

    b) Suppose one of these people strikes it rich and becomes a billionaire.

        The average salary over the 100 students is then > $10 million.

        We can see that the average is easily thrown off by a single outlier.
        In this case, the MEDIAN is much more valuable.

    c) The mean is thrown off by outliers. A better statistics is the median,
        the 50th percentile.

2) Selection

    a)
        S: [5, 10, 5, 8, 6, 20, 1, 50, 13, 12, 50]

        What is the median of these numbers?

            How many numbers are there?: 11 numbers
            Which position is the median: 6th position after sort (6th smallest)
            What is the median?: 10

        What is the 75th percentile
            Anything between the 8th and 9th position.

        Given an array of numbers S[1..n], integer k.
            Find: the kth smallest element of S.

            Median:                     k = n/2
            Min:                        k = 1
            75th percentile (75%ile):   k = (3/4)n

        S: [1, 2, 3, 4]

            The median is the range [2, 3], so 2, 2.1, 2.5, 3.0 are all medians.

    b) Algorithm:

        > Sort S
        > Return S[k]

        Time: O(nlogn)

        However, this is doing a lot of extra work, we don't need it sorted,
        it's simply overkill. So this algorithm is correct but unnecessary.

        Using divide and conquer, we can find the median or 75%ile in
        linear time.

3) Divide and Conquer Selection

    a) To split S:
        > Pick a value V
        > Create two subarrays

            S_< : elements < V
            S_> : elements > V

        ex: V = 12
            S_< : [5, 10, 5, 8, 6, 1]
            S_> : [20, 50, 13, 50]

            Let n_V = # of times V appears
            | S_< | + n_V + | S_> | = n


            [ S_< ] [V] [ S_> ]
               6     1     4

            If we want the 10th element, we take the 3rd element in S_>.

    b) select(S, k) =   | select(S_<, k)                    if k <= | S_< |
                        | V                                 if | S_< | < k <= | S_< | + n_V
                        | select(S_>, k - | S_< | - n_V)    if k > | S_< | + n_V

        ex: select(S, 11)
                > select(S_>, 4)

    c) Running time?

        Depends on how V is chosen.
        If | S_< | approx. | S_> | approx. n/2 then
            T(n) = T(n/2) + O(n)
                 = O(n)

        But we don't know how to find such a V...
        Instead: Pick V at random from S.

    d) Running time: Lucky and Unlucky cases

        i) Lucky:

            V is always the median.
            T(n) = T(n/2) + O(n)
                 = O(n) LINEAR

        ii) Unlucky:

            V is always the min or max, making our array shrink by only 1
            every time.
            T(n) = T(n-1) + O(n)
                 O(n^2)

        So running time is a range from O(n) to O(n^2).
        However, the expected running time is actually very close to O(n).

    e) What is the expected running time?

        (*) The average number of splits before the array shrinks to 3/4 of its
            size is <= 2.

        T(n) = EXPECTED time on an array of size n.
             <= T((3/4)n) + O(n)
             = O(n)

    f) Get back to (*)

        We'll say a SPLIT is GOOD if it shrinks the array to <= 3/4 of its size.

        What is the chance of getting a good split?

            |<        V       >|
        |-----------------------------|
            25        50      75
                    median

        Any split has a 50% chance of being good.
        A split is good if V lies between the 25th and 75th percentile,
        which happens with a probability of 1/2.

        Therefore the probability that is good, is >= 50%.
        Therefore on average, # of splits needed before one of them is good
        is <= 2.

        If you have a coin, how many tosses on average do you have to do to
        get a heads? Toss it twice.

            1 / probability.

        If you have a dartboard with 10% chance to hit, on average you will
        hit it tossing it 10 times.


----------
Discussion

A dag never has a cycle.

A cycle in your metagraph would mean your SCCs consists of a graph that's
not a dag.

This means a dag always has a topographic order.

    Things we can use in pseudocode:
        Let G^R be the reverse graph of G.
        Let G' = (V', E') be the metagraph.
        SCC = SCC(G)  // SCC is an array; SCC[V] = which SCC node V belongs to

        SCC:
            [A, B, C, D, E, F]
            [1, 3, 2, 1, 2, 2]

        > dfs(G)
        > explore(G, v)
        > scc(G)

Ex:
    Input: directed graph G = (V, E)
    Output: Smallest set of nodes such that every node in V is reachable V' \in V

            So we want to minimize |V'|.

            > build a metagraph G'
            > find all the sources in the metagraph G'
            > for each source metanode, pick any node from the original graph G
              in that metanode, add to V'
            > return V'

Ex:
    Input: directed graph G = (V, E)
    Output: a node v such that every u \in V can reach v, if it exists.

        > build a metagraph G'
        > find all the sinks in G'
        > if more than 1 sink was found, no v exists
        > pick a node corresponding to the sink metanode

Ex:
    Input: directed graph G = (V, E)
    Output: array reachable where reachable[v] = # of nodes v can reach

    reachable: [A, B, C, D, E, F]
                6, 4, 3, 6, 3, 3    <- to get this easily, just look at SCC

        > build a metagraph G'
        > count the number of nodes corresponding to each metanode
        > in reverse topological order, for each metanode, add its count to the
          count of its children
        > each node is assigned the count of its metanode

        (ALMOST DONE)
